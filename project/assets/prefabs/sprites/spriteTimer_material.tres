[gd_resource type="ShaderMaterial" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeScalarOp" id=2]
operator = 8

[sub_resource type="VisualShaderNodeExpression" id=3]
size = Vector2( 395, 357 )
expression = "//
// Polar coordinates to filter according to theta
fNewX = uv.y - 0.5;
fNewY = uv.x - 1.0 + 0.5;
r = sqrt(fNewX * fNewX + fNewY * fNewY);"

[sub_resource type="VisualShaderNodeColorOp" id=4]
operator = 3

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "total_time"

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "elapsed_time"

[sub_resource type="VisualShaderNodeExpression" id=7]
size = Vector2( 550, 771 )
expression = "float fPi = 3.141593;
float fHalfSize = 0.5;

position = uv;
alpha = 1.0;
color_final = color_bg;

float fDistance = distance(uv.xy, vec2(0.5, 0.5));
if (fDistance > fHalfSize)
{
	alpha = 0.0;
}

float fAngularTheta = time * 6.28 / total_time;
if(thetaUV + 3.14 - fAngularTheta > 0.0)
{
	color_final = color_fg;
}"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=9]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarConstant" id=10]
constant = 10.0

[sub_resource type="VisualShaderNodeColorConstant" id=11]
constant = Color( 0, 1, 0.360784, 1 )

[sub_resource type="VisualShader" id=12]
code = "shader_type spatial;
render_mode specular_schlick_ggx;

uniform float elapsed_time;
uniform float total_time;



void vertex() {
// Output:0

}

void fragment() {
// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// Color:9
	vec3 n_out9p0 = vec3(0.000000, 1.000000, 0.360784);
	float n_out9p1 = 1.000000;

// Color:10
	vec3 n_out10p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out10p1 = 1.000000;

// Expression:12
	float n_out12p0;
	float n_out12p1;
	float n_out12p2;
	n_out12p0 = 0.0;
	n_out12p1 = 0.0;
	n_out12p2 = 0.0;
	{
		//
		// Polar coordinates to filter according to theta
		n_out12p1 = n_out5p0.y - 0.5;
		n_out12p2 = n_out5p0.x - 1.0 + 0.5;
		n_out12p0 = sqrt(n_out12p1 * n_out12p1 + n_out12p2 * n_out12p2);
	}

// ScalarOp:11
	float n_out11p0 = atan(n_out12p2, n_out12p1);

// ScalarUniform:15
	float n_out15p0 = elapsed_time;

// ScalarUniform:14
	float n_out14p0 = total_time;

// Expression:4
	vec3 n_out4p0;
	float n_out4p1;
	vec3 n_out4p2;
	n_out4p0 = vec3(0.0, 0.0, 0.0);
	n_out4p1 = 0.0;
	n_out4p2 = vec3(0.0, 0.0, 0.0);
	{
		float fPi = 3.141593;
		float fHalfSize = 0.5;
		
		n_out4p0 = n_out5p0;
		n_out4p1 = 1.0;
		n_out4p2 = n_out10p0;
		
		float fDistance = distance(n_out5p0.xy, vec2(0.5, 0.5));
		if (fDistance > fHalfSize)
		{
			n_out4p1 = 0.0;
		}
		
		float fAngularTheta = n_out15p0 * 6.28 / n_out14p0;
		if(n_out11p0 + 3.14 - fAngularTheta > 0.0)
		{
			n_out4p2 = n_out9p0;
		}
	}

// Output:0
	ALBEDO = n_out4p2;
	ALPHA = n_out4p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -907.142, 366 )
nodes/fragment/0/position = Vector2( 140, 440 )
nodes/fragment/4/node = SubResource( 7 )
nodes/fragment/4/position = Vector2( -440, 400 )
nodes/fragment/4/size = Vector2( 550, 771 )
nodes/fragment/4/input_ports = "0,1,uv;1,1,color_fg;2,1,color_bg;3,0,r;4,0,thetaUV;5,0,time;6,0,total_time;"
nodes/fragment/4/output_ports = "0,1,position;1,0,alpha;2,1,color_final;"
nodes/fragment/4/expression = "float fPi = 3.141593;
float fHalfSize = 0.5;

position = uv;
alpha = 1.0;
color_final = color_bg;

float fDistance = distance(uv.xy, vec2(0.5, 0.5));
if (fDistance > fHalfSize)
{
	alpha = 0.0;
}

float fAngularTheta = time * 6.28 / total_time;
if(thetaUV + 3.14 - fAngularTheta > 0.0)
{
	color_final = color_fg;
}"
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( -700, 420 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -720, 520 )
nodes/fragment/7/node = SubResource( 10 )
nodes/fragment/7/position = Vector2( -900, 580 )
nodes/fragment/9/node = SubResource( 11 )
nodes/fragment/9/position = Vector2( -880, 700 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -860, 800 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( -400, 1180 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -1000, 900 )
nodes/fragment/12/size = Vector2( 395, 357 )
nodes/fragment/12/input_ports = "0,1,uv;"
nodes/fragment/12/output_ports = "0,0,r;1,0,fNewX;2,0,fNewY;"
nodes/fragment/12/expression = "//
// Polar coordinates to filter according to theta
fNewX = uv.y - 0.5;
fNewY = uv.x - 1.0 + 0.5;
r = sqrt(fNewX * fNewX + fNewY * fNewY);"
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 200, 300 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -660, 700 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( -660, 600 )
nodes/fragment/connections = PoolIntArray( 5, 0, 4, 0, 4, 1, 0, 1, 4, 2, 0, 0, 10, 0, 4, 2, 9, 0, 4, 1, 5, 0, 12, 0, 12, 0, 4, 3, 11, 0, 4, 4, 4, 2, 13, 0, 12, 2, 11, 0, 12, 1, 11, 1, 14, 0, 4, 6, 15, 0, 4, 5 )

[resource]
shader = SubResource( 12 )
shader_param/elapsed_time = null
shader_param/total_time = null
